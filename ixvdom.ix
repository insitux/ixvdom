;https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060

(var from-key @((key? %) (-> % str sect)))

(function make-attr [k v]
  (str " " (from-key k) "=\""
    (if (func? v) (str "ix('(" v ") (update)')") v)
    "\""))

(function vec->html v
  (if! (vec? v) (return v))
  (let [tag attr] v
       has-attr   (dict? attr)
       attr       (if has-attr (map make-attr attr) "")
       tag        (from-key tag)
       body       (sect v (has-attr 2 1))
       body       (map vec->html body))
  (if (["link" "input" "img" "meta"] tag)
    (.. str "<" tag attr "/>")
    (.. str "<" tag attr ">" body "</" tag ">")))

(var -old-dom [])

(function el= old new
  (if (and (vec? old) (vec? new))
    (= (0 old) (0 new))
    (= old new)))

(function children el
  (let sans-tag (sect el))
  (if (dict? (0 sans-tag))
    (sect sans-tag)
    sans-tag))

(function update-children&props parent old new index
  ;(match true           TODO update attributes reactively
  ;  (dict? (1 old))
  ;    )
  (var olds  (children old)
       news  (children new)
       child (child-at parent index)
       max-n (max (len olds) (len news)))
  (repeat @(update-walk child (% olds) (% news))
          max-n))

(function vec->el v
  (html-el (vec->html v)))

(function update-walk parent old new index
  ;(print parent "    " old "    " new "    " index)
  (match true
    (! old)
      (append-child parent (vec->el new))
    (! new)
      (remove-child parent index)
    (! (el= old new))
      (replace-child parent (vec->el new) index)
    (vec? old)
      (update-children&props parent old new index)))

(function update
  (let new-dom (-view $state))
  ;(print "old dom " -old-dom)
  ;(print "new dom " new-dom)
  (update-walk $mount -old-dom new-dom 0)
  (var -old-dom new-dom))

(function ixvdom-mount mount view state
  ($mount mount)
  (var -view view)
  ($state (or $state state))
  (-> state view (var -old-dom) vec->html (inner-html mount)))
